Patrick Bald
Cloud Computing - Work Queue DNA matching

Part 1:

After moving a small number of sequences into a separate file, I found that I could make 6 sequence alignments in one minute, on one machine. 

Given that it took 8.43 seconds to make one comparison, and there are 31125 combinations of sequences to be aligned, doing every alignment on one machine would take 72 hours. It would take double this if each sequence was compared to sequences it had already been compared too. 

Given that each alignment takes 8.43 seconds, one machine could do 425 alignments in one hour. To do all 31125 alignments we would then need 73 machines to be working simultaneously. 

To do the comparisons for 100,000 sequences, we would need to do 4,999,950,000 alignments, which would take over 1336 years to do the entire computation on one machine. 

Part 2:

Top Ten Matches:
1: sequence 1102140143903 matches 1102140176186 with a score of 1539
2: sequence 1102140177182 matches 1102140177183 with a score of 874
3: sequence 1102140167168 matches 1102140172678 with a score of 818
4: sequence 1101555423227 matches 1102140171813 with a score of 777
5: sequence 1101555423815 matches 1102140164074 with a score of 767
6: sequence 1101671610328 matches 1102140171192 with a score of 764
7: sequence 1102140170611 matches 1102140171192 with a score of 744
8: sequence 1102140171192 matches 1102140178449 with a score of 742
9: sequence 1101555423803 matches 1102140171192 with a score of 741
10: sequence 1101671610328 matches 1102140178493 with a score of 736

Part 3:

30 Sequences = 435 combinations to compare = ~3667 seconds to compute

Given that each condor job was instructed to use 4 cores, each worker could then do 4 jobs at once, which essentially quadruples the number of workers. 


				Condor Time		Speedup		Efficiency
------------------------------------------------------
50 workers:		1m43.424s		x35			17.72%
100 workers:	0m28.975s		x126		31.69%			
150 workers:	0m26.744s		x137		22.85%
200 workers:	0m24.927		x147		18.38%


These numbers suprise me a little, as I did not expect the speedup to be so great, and the efficiency to be so low. I sususpect the huge decrease in alignment run time from 50 to 100 workers has to do with the number of workers corresponding much closer with the number of alignments to be computed. With 100 workers, each running 4 tasks, all 435 alignments can be done almost simultaneously. The low efficiency numbers suprised me at first but start to make sense when you think about how many tasks can be running at once on 4 cores. With 200 workers for example, each running 4 tasks, there are double the number of tasks that could be run at any moment than the actual number of alignments to be computed. This could also explain why the time to compute all the alignments does not increase much after using 100 workers, as 100 workers is already enough to run each alignment at the same time. 

To further measure the performance of my application, I would increase the number of sequences to be aligned so that it was greater than the number of workers x cores, to ensure that I keep workers busy. 
